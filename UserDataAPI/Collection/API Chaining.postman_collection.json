{
	"info": {
		"_postman_id": "8844cc98-b8bf-41f2-9392-ca2df75681c1",
		"name": "API Chaining",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35285187",
		"_collection_link": "https://www.postman.com/karunaparsekar/workspace/testlibrary/collection/35285187-8844cc98-b8bf-41f2-9392-ca2df75681c1?action=share&source=collection_link&creator=35285187"
	},
	"item": [
		{
			"name": "createUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json();\r",
							"console.log(jsonResponse)\r",
							"console.log(jsonResponse.id)\r",
							"pm.collectionVariables.set(\"id\",jsonResponse.id );\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// List of predefined first names and last names\r",
							"const maleFirstNames = [\"Shankar\", \"Jim\", \"Adi\", \"Bob\", \"Charlie\", \"Rob\", \"Edward\", \"Om\", \"George\", \"Ram\",\"Shyam\",\"Arun\",\"Veer\"];\r",
							"const femaleFirstNames = [\"Ovi\", \"Jane\", \"Alice\", \"Rita\", \"Sheela\", \"Diana\", \"Kendra\", \"Fiona\", \"Zia\", \"Viana\",\"Ana\",\"Lisa\",\"Priya\"];\r",
							"const lastNames = [\"Rao\", \"Johnson\", \"Mehta\", \"Patil\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\", \"Rodriguez\", \"Patel\",\"Shah\",\"Joshi\"];\r",
							"const  domains = [\"@gmail.com\",\"@yahoo.com\",\"@hotmail.com\"]\r",
							"\r",
							"// Function to get a random element from an array\r",
							"function getRandomElement(array) {\r",
							"    return array[Math.floor(Math.random() * array.length)];\r",
							"}\r",
							"\r",
							"// Randomly choose a gender and set the gender in env var\r",
							"const genders = [\"male\", \"female\"];\r",
							"const gender = getRandomElement(genders);\r",
							"pm.environment.set(\"gender\", gender);\r",
							"\r",
							"//Based on Gender create Name\r",
							"let name\r",
							"if (gender == \"male\"){\r",
							"    name  = getRandomElement(maleFirstNames) + \" \" + getRandomElement(lastNames);\r",
							"} else{\r",
							"    name  = getRandomElement(femaleFirstNames) + \" \" + getRandomElement(lastNames);\r",
							"}\r",
							"// Generate a random domain\r",
							"const domain = getRandomElement(domains);\r",
							"\r",
							"// Add a random number to ensure uniqueness\r",
							"const uniqueNumber = Math.floor(Math.random() * 10000).toString();\r",
							"const uniqueEmail = name.replace(\" \", \"\") + uniqueNumber + domain;\r",
							"\r",
							"// Save the name and email as a Postman environment variable\r",
							"pm.environment.set(\"name\", name);\r",
							"pm.environment.set(\"email\", uniqueEmail);\r",
							"\r",
							"// Log the unique name to the Postman console for verification\r",
							"console.log(\"Generated Unique email: \" + uniqueEmail);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"gender\":\"{{gender}}\",\r\n    \"email\":\"{{email}}\",\r\n    \"status\":\"active\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restUrl}}/public/v2/users",
					"host": [
						"{{restUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify json response for user details\", function(){\r",
							"\tpm.expect(jsonResponse.id).to.be.eql(pm.collectionVariables.get(\"id\"));\r",
							"\tpm.expect(jsonResponse.name).to.be.eql(pm.environment.get(\"name\"));\r",
							"\tpm.expect(jsonResponse.email).to.be.eql(pm.environment.get(\"email\"));\r",
							"\tpm.expect(jsonResponse.gender).to.be.eql(pm.environment.get(\"gender\"));\r",
							"\t\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restUrl}}/public/v2/users/{{id}}",
					"host": [
						"{{restUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify json response for user details\", function(){\r",
							"\tpm.expect(jsonResponse.email).to.be.eql(pm.environment.get(\"email\"));\r",
							"\tpm.expect(jsonResponse.status).to.be.eql(\"active\");\r",
							"\t\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// List of predefined first names and last names\r",
							"var email = pm.environment.get(\"email\")\r",
							"console.log(email.split('@')[0]);\r",
							"\r",
							"const  domains = [\"@gmail.com\",\"@yahoo.com\",\"@hotmail.com\"]\r",
							"\r",
							"// Function to get a random element from an array\r",
							"function getRandomElement(array) {\r",
							"    return array[Math.floor(Math.random() * array.length)];\r",
							"}\r",
							"\r",
							"// Generate a random domain\r",
							"const domain = getRandomElement(domains);\r",
							"\r",
							"// Add a random number to ensure uniqueness\r",
							"const uniqueNumber = Math.floor(Math.random() * 10000).toString();\r",
							"const uniqueEmail = email.split('@')[0] + uniqueNumber + domain;\r",
							"\r",
							"// Save the new email as a Postman environment variable\r",
							"pm.environment.set(\"email\", uniqueEmail);\r",
							"\r",
							"// Log the unique name to the Postman console for verification\r",
							"console.log(\"Generated Unique email: \" + uniqueEmail);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"{{email}}\",\r\n    \"status\":\"active\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restUrl}}/public/v2/users/{{id}}",
					"host": [
						"{{restUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"id being deleted is \" + pm.collectionVariables.get(\"id\"))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{restUrl}}/public/v2/users/{{id}}",
					"host": [
						"{{restUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "802068062b0662288ae88a7a90ca9793ab84560dc087b5e725ed6df88f7d72a9",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		}
	]
}
