{
	"info": {
		"_postman_id": "3ab22654-fad2-4600-8735-691696f7e74b",
		"name": "StudentsNestedJSON",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35285187",
		"_collection_link": "https://www.postman.com/karunaparsekar/workspace/testlibrary/collection/35285187-3ab22654-fad2-4600-8735-691696f7e74b?action=share&source=collection_link&creator=35285187"
	},
	"item": [
		{
			"name": "getStudent1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"   \r",
							"});\r",
							"\r",
							"pm.test(\"Verify Content type Header is present\",() =>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Content type Header is application/json\",() =>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Language Cookie is present\",function(){\r",
							"\tpm.cookies.has('Language');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Language Cookie has value en-gb\",function(){\r",
							"\tpm.expect(pm.cookies.get('Language')).to.be.eql(\"en-gb\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify response time is no more than 100ms\",function(){\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify json response\", function(){\r",
							"\tpm.expect(jsonResponse.name).to.be.a(\"string\");\r",
							"\tpm.expect(jsonResponse.name).to.be.eql(\"John Doe\");\r",
							"\tpm.expect(jsonResponse.courses).to.be.an(\"array\");\r",
							"\tpm.expect(jsonResponse.courses).to.include(\"math\");\r",
							"\tpm.expect(jsonResponse.courses).to.have.members([\"math\",\"science\",\"english\"]);\r",
							"\t\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"grades\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"math\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"science\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"english\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"math\",\r",
							"        \"science\",\r",
							"        \"english\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"age\",\r",
							"    \"courses\",\r",
							"    \"grades\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"ajv = new Ajv({\r",
							"logger: console\r",
							"});\r",
							"\r",
							"pm.test(\"Verify json schema\", ()=> {\r",
							"\tpm.expect(ajv.validate(jsonResponse,schema)).to.be.true;\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "getStudent2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/A2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"A2"
					]
				}
			},
			"response": []
		},
		{
			"name": "getStudent3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllStudents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response\r",
							"let jsonData = pm.response.json();\r",
							"let distinctionStudents = []\r",
							"\r",
							"// Function to validate distinction for given student\r",
							"function validateDistinction(student) {\r",
							"\r",
							"\tif (student.grades[\"math\"] >= 75 & student.grades[\"science\"] >= 75 & student.grades[\"english\"] >= 75) {\r",
							"\t\tif (student.grades[\"Chemistry\"]) {\r",
							"\t\t\tif (student.grades[\"Chemistry\"] >= 75) {\r",
							"\t\t\t\treturn true;\r",
							"\t\t\t} else {\r",
							"\t\t\t\treturn false;\r",
							"\t\t\t}\r",
							"\t\t}\r",
							"\t\treturn true;\r",
							"\t} else {\r",
							"\t\treturn false;\r",
							"\t}\r",
							"\r",
							"}\r",
							"\r",
							"// Iterate over each student and validate their grades\r",
							"\r",
							"\r",
							"pm.test(\"Verify the distinction students \", function () {\r",
							"\tjsonData.forEach(student => {\r",
							"\t\t// Validate grades for each student for distinction\r",
							"\r",
							"\t\tif (validateDistinction(student)) {\r",
							"\t\t\tconsole.log(student.id)\r",
							"\t\t\tdistinctionStudents.push(student.id)\r",
							"\t\t}\r",
							"\r",
							"\t});\r",
							"\tpm.collectionVariables.set(\"distinctionStudentIdArray\", distinctionStudents);\r",
							"\tpm.expect(distinctionStudents).with.length.above(0);\r",
							"});\r",
							"\r",
							"//console.log(distinctionStudents);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "addNewStudent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Status is created\", () =>{\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Verify status code is either 201 or 202\",function(){\r",
							"\tpm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"id\": \"4\",\r\n      \"name\": \"Jake Shah\",\r\n      \"age\": 18,\r\n      \"grades\": {\r\n        \"math\": 92,\r\n        \"science\": 89,\r\n        \"english\": 91\r\n      }\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateStudent1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"id\": \"1\",\r\n      \"name\": \"John Doe\",\r\n      \"age\": 17,\r\n      \"grades\": {\r\n        \"math\": 90,\r\n        \"science\": 85,\r\n        \"english\": 78,\r\n\t\t\"Chemistry\": 90\r\n      }\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateStudent2",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"id\": \"2\",\r\n      \"name\": \"Jane Smith\",\r\n      \"age\": 18,\r\n      \"grades\": {\r\n        \"math\": 92,\r\n        \"science\": 89,\r\n        \"english\": 91,\r\n        \"Chemistry\": 56\r\n      }\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateStudent3",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"3\",\r\n    \"name\": \"Jane Shah\",\r\n    \"age\": 19,\r\n    \"grades\": {\r\n        \"math\": 92,\r\n        \"science\": 89,\r\n        \"english\": 91,\r\n        \"Chemistry\": 56\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteStudent4",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "getGradesOfStudent1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json();    \r",
							"\r",
							"\r",
							"pm.test(\"Verify if student has distinction\", function(){\r",
							"    pm.expect(jsonResponse.grades.math).to.be.above(75)\r",
							"    pm.expect(jsonResponse.grades.science).to.be.above(75)\r",
							"    pm.expect(jsonResponse.grades.english).to.be.above(75)\r",
							"\t\tif (jsonResponse.grades[\"Chemistry\"]){\r",
							"            pm.expect(jsonResponse.grades.Chemistry).to.be.above(75)\r",
							"\t\t\t    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "distinctionStudentIdArray",
			"value": ""
		}
	]
}